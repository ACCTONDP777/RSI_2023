//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RSI.FLM
{
    using System.Runtime.Serialization;
    using System;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "PDFFileSetting", Namespace = "http://schemas.datacontract.org/2004/07/Com.Auo.FLM.Basic.Lib.AppCode.Utility")]
    [System.SerializableAttribute()]
    public partial class PDFFileSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AddDownloadInfoField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AddWatermarkField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowCopyField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowHandleField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowModifyField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowPrintField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomDownloadInfoField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViewPasswordField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddDownloadInfo
        {
            get
            {
                return this.AddDownloadInfoField;
            }
            set
            {
                if ((this.AddDownloadInfoField.Equals(value) != true))
                {
                    this.AddDownloadInfoField = value;
                    this.RaisePropertyChanged("AddDownloadInfo");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddWatermark
        {
            get
            {
                return this.AddWatermarkField;
            }
            set
            {
                if ((this.AddWatermarkField.Equals(value) != true))
                {
                    this.AddWatermarkField = value;
                    this.RaisePropertyChanged("AddWatermark");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowCopy
        {
            get
            {
                return this.AllowCopyField;
            }
            set
            {
                if ((this.AllowCopyField.Equals(value) != true))
                {
                    this.AllowCopyField = value;
                    this.RaisePropertyChanged("AllowCopy");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowHandle
        {
            get
            {
                return this.AllowHandleField;
            }
            set
            {
                if ((this.AllowHandleField.Equals(value) != true))
                {
                    this.AllowHandleField = value;
                    this.RaisePropertyChanged("AllowHandle");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowModify
        {
            get
            {
                return this.AllowModifyField;
            }
            set
            {
                if ((this.AllowModifyField.Equals(value) != true))
                {
                    this.AllowModifyField = value;
                    this.RaisePropertyChanged("AllowModify");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowPrint
        {
            get
            {
                return this.AllowPrintField;
            }
            set
            {
                if ((this.AllowPrintField.Equals(value) != true))
                {
                    this.AllowPrintField = value;
                    this.RaisePropertyChanged("AllowPrint");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomDownloadInfo
        {
            get
            {
                return this.CustomDownloadInfoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CustomDownloadInfoField, value) != true))
                {
                    this.CustomDownloadInfoField = value;
                    this.RaisePropertyChanged("CustomDownloadInfo");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViewPassword
        {
            get
            {
                return this.ViewPasswordField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ViewPasswordField, value) != true))
                {
                    this.ViewPasswordField = value;
                    this.RaisePropertyChanged("ViewPassword");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "WaterMarkerFontStyle", Namespace = "http://schemas.datacontract.org/2004/07/Com.Auo.FLM.Basic.Lib.AppCode.Utility")]
    [System.SerializableAttribute()]
    public partial class WaterMarkerFontStyle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FontField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FontColorHtmlField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FontLocationXField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FontLocationYField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FontSizeField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FontTransparencyField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.FontStyle Font_style_NewField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RotationField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemIDField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content
        {
            get
            {
                return this.ContentField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ContentField, value) != true))
                {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Font
        {
            get
            {
                return this.FontField;
            }
            set
            {
                if ((object.ReferenceEquals(this.FontField, value) != true))
                {
                    this.FontField = value;
                    this.RaisePropertyChanged("Font");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FontColorHtml
        {
            get
            {
                return this.FontColorHtmlField;
            }
            set
            {
                if ((object.ReferenceEquals(this.FontColorHtmlField, value) != true))
                {
                    this.FontColorHtmlField = value;
                    this.RaisePropertyChanged("FontColorHtml");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FontLocationX
        {
            get
            {
                return this.FontLocationXField;
            }
            set
            {
                if ((this.FontLocationXField.Equals(value) != true))
                {
                    this.FontLocationXField = value;
                    this.RaisePropertyChanged("FontLocationX");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FontLocationY
        {
            get
            {
                return this.FontLocationYField;
            }
            set
            {
                if ((this.FontLocationYField.Equals(value) != true))
                {
                    this.FontLocationYField = value;
                    this.RaisePropertyChanged("FontLocationY");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FontSize
        {
            get
            {
                return this.FontSizeField;
            }
            set
            {
                if ((this.FontSizeField.Equals(value) != true))
                {
                    this.FontSizeField = value;
                    this.RaisePropertyChanged("FontSize");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FontTransparency
        {
            get
            {
                return this.FontTransparencyField;
            }
            set
            {
                if ((this.FontTransparencyField.Equals(value) != true))
                {
                    this.FontTransparencyField = value;
                    this.RaisePropertyChanged("FontTransparency");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.FontStyle Font_style_New
        {
            get
            {
                return this.Font_style_NewField;
            }
            set
            {
                if ((this.Font_style_NewField.Equals(value) != true))
                {
                    this.Font_style_NewField = value;
                    this.RaisePropertyChanged("Font_style_New");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Rotation
        {
            get
            {
                return this.RotationField;
            }
            set
            {
                if ((this.RotationField.Equals(value) != true))
                {
                    this.RotationField = value;
                    this.RaisePropertyChanged("Rotation");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemID
        {
            get
            {
                return this.SystemIDField;
            }
            set
            {
                if ((object.ReferenceEquals(this.SystemIDField, value) != true))
                {
                    this.SystemIDField = value;
                    this.RaisePropertyChanged("SystemID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "WaterMarkerPictureStyle", Namespace = "http://schemas.datacontract.org/2004/07/Com.Auo.FLM.Basic.Lib.AppCode.Utility")]
    [System.SerializableAttribute()]
    public partial class WaterMarkerPictureStyle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float GrayFillField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayerField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PictureLocationXField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PictureLocationYField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RotationField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RotationDegreesField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemIDField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float GrayFill
        {
            get
            {
                return this.GrayFillField;
            }
            set
            {
                if ((this.GrayFillField.Equals(value) != true))
                {
                    this.GrayFillField = value;
                    this.RaisePropertyChanged("GrayFill");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Layer
        {
            get
            {
                return this.LayerField;
            }
            set
            {
                if ((object.ReferenceEquals(this.LayerField, value) != true))
                {
                    this.LayerField = value;
                    this.RaisePropertyChanged("Layer");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float PictureLocationX
        {
            get
            {
                return this.PictureLocationXField;
            }
            set
            {
                if ((this.PictureLocationXField.Equals(value) != true))
                {
                    this.PictureLocationXField = value;
                    this.RaisePropertyChanged("PictureLocationX");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float PictureLocationY
        {
            get
            {
                return this.PictureLocationYField;
            }
            set
            {
                if ((this.PictureLocationYField.Equals(value) != true))
                {
                    this.PictureLocationYField = value;
                    this.RaisePropertyChanged("PictureLocationY");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Rotation
        {
            get
            {
                return this.RotationField;
            }
            set
            {
                if ((this.RotationField.Equals(value) != true))
                {
                    this.RotationField = value;
                    this.RaisePropertyChanged("Rotation");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public float RotationDegrees
        {
            get
            {
                return this.RotationDegreesField;
            }
            set
            {
                if ((this.RotationDegreesField.Equals(value) != true))
                {
                    this.RotationDegreesField = value;
                    this.RaisePropertyChanged("RotationDegrees");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemID
        {
            get
            {
                return this.SystemIDField;
            }
            set
            {
                if ((object.ReferenceEquals(this.SystemIDField, value) != true))
                {
                    this.SystemIDField = value;
                    this.RaisePropertyChanged("SystemID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "FLM.FLMService")]
    public interface FLMService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/UploadFile", ReplyAction = "http://tempuri.org/FLMService/UploadFileResponse")]
        string UploadFile(string sys_id, byte[] file_stream, string file_name, string biz_id, string security_level, string mark_style, bool preconvert_pdf, string emp_no, string remark);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/UploadFile", ReplyAction = "http://tempuri.org/FLMService/UploadFileResponse")]
        System.Threading.Tasks.Task<string> UploadFileAsync(string sys_id, byte[] file_stream, string file_name, string biz_id, string security_level, string mark_style, bool preconvert_pdf, string emp_no, string remark);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFile", ReplyAction = "http://tempuri.org/FLMService/GetFileResponse")]
        RSI.FLM.GetFileResponse GetFile(RSI.FLM.GetFileRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFile", ReplyAction = "http://tempuri.org/FLMService/GetFileResponse")]
        System.Threading.Tasks.Task<RSI.FLM.GetFileResponse> GetFileAsync(RSI.FLM.GetFileRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileforExternal", ReplyAction = "http://tempuri.org/FLMService/GetFileforExternalResponse")]
        RSI.FLM.GetFileforExternalResponse GetFileforExternal(RSI.FLM.GetFileforExternalRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileforExternal", ReplyAction = "http://tempuri.org/FLMService/GetFileforExternalResponse")]
        System.Threading.Tasks.Task<RSI.FLM.GetFileforExternalResponse> GetFileforExternalAsync(RSI.FLM.GetFileforExternalRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileWithMarkStyle", ReplyAction = "http://tempuri.org/FLMService/GetFileWithMarkStyleResponse")]
        RSI.FLM.GetFileWithMarkStyleResponse GetFileWithMarkStyle(RSI.FLM.GetFileWithMarkStyleRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileWithMarkStyle", ReplyAction = "http://tempuri.org/FLMService/GetFileWithMarkStyleResponse")]
        System.Threading.Tasks.Task<RSI.FLM.GetFileWithMarkStyleResponse> GetFileWithMarkStyleAsync(RSI.FLM.GetFileWithMarkStyleRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileWithPictureMark", ReplyAction = "http://tempuri.org/FLMService/GetFileWithPictureMarkResponse")]
        RSI.FLM.GetFileWithPictureMarkResponse GetFileWithPictureMark(RSI.FLM.GetFileWithPictureMarkRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileWithPictureMark", ReplyAction = "http://tempuri.org/FLMService/GetFileWithPictureMarkResponse")]
        System.Threading.Tasks.Task<RSI.FLM.GetFileWithPictureMarkResponse> GetFileWithPictureMarkAsync(RSI.FLM.GetFileWithPictureMarkRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/ConvertToPDF", ReplyAction = "http://tempuri.org/FLMService/ConvertToPDFResponse")]
        bool ConvertToPDF(string strSysID, string strBizID, string strFileID, string location);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/ConvertToPDF", ReplyAction = "http://tempuri.org/FLMService/ConvertToPDFResponse")]
        System.Threading.Tasks.Task<bool> ConvertToPDFAsync(string strSysID, string strBizID, string strFileID, string location);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/DeleteFile", ReplyAction = "http://tempuri.org/FLMService/DeleteFileResponse")]
        bool DeleteFile(string file_id, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/DeleteFile", ReplyAction = "http://tempuri.org/FLMService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string file_id, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/DeleteFileByBizID", ReplyAction = "http://tempuri.org/FLMService/DeleteFileByBizIDResponse")]
        bool DeleteFileByBizID(string sys_id, string biz_id, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/DeleteFileByBizID", ReplyAction = "http://tempuri.org/FLMService/DeleteFileByBizIDResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileByBizIDAsync(string sys_id, string biz_id, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/SetFileAttribute", ReplyAction = "http://tempuri.org/FLMService/SetFileAttributeResponse")]
        bool SetFileAttribute(string sys_id, string biz_id, string file_id, string security_level, string mark_style, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/SetFileAttribute", ReplyAction = "http://tempuri.org/FLMService/SetFileAttributeResponse")]
        System.Threading.Tasks.Task<bool> SetFileAttributeAsync(string sys_id, string biz_id, string file_id, string security_level, string mark_style, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileIDByBizID", ReplyAction = "http://tempuri.org/FLMService/GetFileIDByBizIDResponse")]
        string[] GetFileIDByBizID(string sys_id, string biz_id);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileIDByBizID", ReplyAction = "http://tempuri.org/FLMService/GetFileIDByBizIDResponse")]
        System.Threading.Tasks.Task<string[]> GetFileIDByBizIDAsync(string sys_id, string biz_id);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/CheckFileID", ReplyAction = "http://tempuri.org/FLMService/CheckFileIDResponse")]
        bool CheckFileID(string file_id);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/CheckFileID", ReplyAction = "http://tempuri.org/FLMService/CheckFileIDResponse")]
        System.Threading.Tasks.Task<bool> CheckFileIDAsync(string file_id);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/CheckPDFStatus", ReplyAction = "http://tempuri.org/FLMService/CheckPDFStatusResponse")]
        System.Data.DataTable CheckPDFStatus(string sys_id, string biz_id, string file_id);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/CheckPDFStatus", ReplyAction = "http://tempuri.org/FLMService/CheckPDFStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> CheckPDFStatusAsync(string sys_id, string biz_id, string file_id);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetEncryptUrl", ReplyAction = "http://tempuri.org/FLMService/GetEncryptUrlResponse")]
        string GetEncryptUrl(string queryString, string user_name, string password);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetEncryptUrl", ReplyAction = "http://tempuri.org/FLMService/GetEncryptUrlResponse")]
        System.Threading.Tasks.Task<string> GetEncryptUrlAsync(string queryString, string user_name, string password);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetPDFFileSetting", ReplyAction = "http://tempuri.org/FLMService/GetPDFFileSettingResponse")]
        RSI.FLM.PDFFileSetting GetPDFFileSetting();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetPDFFileSetting", ReplyAction = "http://tempuri.org/FLMService/GetPDFFileSettingResponse")]
        System.Threading.Tasks.Task<RSI.FLM.PDFFileSetting> GetPDFFileSettingAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetWaterMarkerFontStyle", ReplyAction = "http://tempuri.org/FLMService/GetWaterMarkerFontStyleResponse")]
        RSI.FLM.WaterMarkerFontStyle GetWaterMarkerFontStyle();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetWaterMarkerFontStyle", ReplyAction = "http://tempuri.org/FLMService/GetWaterMarkerFontStyleResponse")]
        System.Threading.Tasks.Task<RSI.FLM.WaterMarkerFontStyle> GetWaterMarkerFontStyleAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileGroup", ReplyAction = "http://tempuri.org/FLMService/GetFileGroupResponse")]
        System.Data.DataTable GetFileGroup(string sys_id, string[] biz_id_list, string[] file_id_list);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileGroup", ReplyAction = "http://tempuri.org/FLMService/GetFileGroupResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetFileGroupAsync(string sys_id, string[] biz_id_list, string[] file_id_list);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/DecryptFile", ReplyAction = "http://tempuri.org/FLMService/DecryptFileResponse")]
        byte[] DecryptFile(string empNo, string sys_id, byte[] file_stream, string file_name, string connection_string, string provider_name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/DecryptFile", ReplyAction = "http://tempuri.org/FLMService/DecryptFileResponse")]
        System.Threading.Tasks.Task<byte[]> DecryptFileAsync(string empNo, string sys_id, byte[] file_stream, string file_name, string connection_string, string provider_name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFile", ReplyAction = "http://tempuri.org/FLMService/EncryptFileResponse")]
        byte[] EncryptFile(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFile", ReplyAction = "http://tempuri.org/FLMService/EncryptFileResponse")]
        System.Threading.Tasks.Task<byte[]> EncryptFileAsync(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFileByEmail", ReplyAction = "http://tempuri.org/FLMService/EncryptFileByEmailResponse")]
        byte[] EncryptFileByEmail(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFileByEmail", ReplyAction = "http://tempuri.org/FLMService/EncryptFileByEmailResponse")]
        System.Threading.Tasks.Task<byte[]> EncryptFileByEmailAsync(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFileWithOption", ReplyAction = "http://tempuri.org/FLMService/EncryptFileWithOptionResponse")]
        byte[] EncryptFileWithOption(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string encrypt_mode);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFileWithOption", ReplyAction = "http://tempuri.org/FLMService/EncryptFileWithOptionResponse")]
        System.Threading.Tasks.Task<byte[]> EncryptFileWithOptionAsync(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string encrypt_mode);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFileByEmailWithOption", ReplyAction = "http://tempuri.org/FLMService/EncryptFileByEmailWithOptionResponse")]
        byte[] EncryptFileByEmailWithOption(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read, string encrypt_mode);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/EncryptFileByEmailWithOption", ReplyAction = "http://tempuri.org/FLMService/EncryptFileByEmailWithOptionResponse")]
        System.Threading.Tasks.Task<byte[]> EncryptFileByEmailWithOptionAsync(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read, string encrypt_mode);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/CheckFileEncrypt", ReplyAction = "http://tempuri.org/FLMService/CheckFileEncryptResponse")]
        bool CheckFileEncrypt(string sys_id, byte[] file_stream, string file_name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/CheckFileEncrypt", ReplyAction = "http://tempuri.org/FLMService/CheckFileEncryptResponse")]
        System.Threading.Tasks.Task<bool> CheckFileEncryptAsync(string sys_id, byte[] file_stream, string file_name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileEncryptInfo", ReplyAction = "http://tempuri.org/FLMService/GetFileEncryptInfoResponse")]
        string[][] GetFileEncryptInfo(string sys_id, byte[] file_stream, string file_name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetFileEncryptInfo", ReplyAction = "http://tempuri.org/FLMService/GetFileEncryptInfoResponse")]
        System.Threading.Tasks.Task<string[][]> GetFileEncryptInfoAsync(string sys_id, byte[] file_stream, string file_name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetEncryptFileByFileID", ReplyAction = "http://tempuri.org/FLMService/GetEncryptFileByFileIDResponse")]
        byte[] GetEncryptFileByFileID(string sys_id, string file_id, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/GetEncryptFileByFileID", ReplyAction = "http://tempuri.org/FLMService/GetEncryptFileByFileIDResponse")]
        System.Threading.Tasks.Task<byte[]> GetEncryptFileByFileIDAsync(string sys_id, string file_id, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string emp_no);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/UpdateFileInformation", ReplyAction = "http://tempuri.org/FLMService/UpdateFileInformationResponse")]
        bool UpdateFileInformation(string sys_id, string biz_id, string file_id, string new_biz_id, string edit_by, string allow_handle, string view_password, string security_level, string mark_style);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/FLMService/UpdateFileInformation", ReplyAction = "http://tempuri.org/FLMService/UpdateFileInformationResponse")]
        System.Threading.Tasks.Task<bool> UpdateFileInformationAsync(string sys_id, string biz_id, string file_id, string new_biz_id, string edit_by, string allow_handle, string view_password, string security_level, string mark_style);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFile", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public string file_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
        public string emp_no;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 3)]
        public bool get_pdf;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 4)]
        public RSI.FLM.PDFFileSetting MyPDFSetting;

        public GetFileRequest()
        {
        }

        public GetFileRequest(string file_id, string file_name, string emp_no, bool get_pdf, RSI.FLM.PDFFileSetting MyPDFSetting)
        {
            this.file_id = file_id;
            this.file_name = file_name;
            this.emp_no = emp_no;
            this.get_pdf = get_pdf;
            this.MyPDFSetting = MyPDFSetting;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFileResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public byte[] GetFileResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        public GetFileResponse()
        {
        }

        public GetFileResponse(byte[] GetFileResult, string file_name)
        {
            this.GetFileResult = GetFileResult;
            this.file_name = file_name;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFileforExternal", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileforExternalRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public string file_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
        public string emp_no;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 3)]
        public bool get_pdf;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 4)]
        public RSI.FLM.PDFFileSetting MyPDFSetting;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 5)]
        public string strExternalCompany;

        public GetFileforExternalRequest()
        {
        }

        public GetFileforExternalRequest(string file_id, string file_name, string emp_no, bool get_pdf, RSI.FLM.PDFFileSetting MyPDFSetting, string strExternalCompany)
        {
            this.file_id = file_id;
            this.file_name = file_name;
            this.emp_no = emp_no;
            this.get_pdf = get_pdf;
            this.MyPDFSetting = MyPDFSetting;
            this.strExternalCompany = strExternalCompany;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFileforExternalResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileforExternalResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public byte[] GetFileforExternalResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        public GetFileforExternalResponse()
        {
        }

        public GetFileforExternalResponse(byte[] GetFileforExternalResult, string file_name)
        {
            this.GetFileforExternalResult = GetFileforExternalResult;
            this.file_name = file_name;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFileWithMarkStyle", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileWithMarkStyleRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public string file_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
        public string emp_no;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 3)]
        public bool get_pdf;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 4)]
        public RSI.FLM.WaterMarkerFontStyle MyMarkStyle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 5)]
        public RSI.FLM.PDFFileSetting MyPDFSetting;

        public GetFileWithMarkStyleRequest()
        {
        }

        public GetFileWithMarkStyleRequest(string file_id, string file_name, string emp_no, bool get_pdf, RSI.FLM.WaterMarkerFontStyle MyMarkStyle, RSI.FLM.PDFFileSetting MyPDFSetting)
        {
            this.file_id = file_id;
            this.file_name = file_name;
            this.emp_no = emp_no;
            this.get_pdf = get_pdf;
            this.MyMarkStyle = MyMarkStyle;
            this.MyPDFSetting = MyPDFSetting;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFileWithMarkStyleResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileWithMarkStyleResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public byte[] GetFileWithMarkStyleResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        public GetFileWithMarkStyleResponse()
        {
        }

        public GetFileWithMarkStyleResponse(byte[] GetFileWithMarkStyleResult, string file_name)
        {
            this.GetFileWithMarkStyleResult = GetFileWithMarkStyleResult;
            this.file_name = file_name;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFileWithPictureMark", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileWithPictureMarkRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public string file_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
        public string emp_no;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 3)]
        public bool get_pdf;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 4)]
        public string pic_fileID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 5)]
        public RSI.FLM.WaterMarkerPictureStyle MyPictureStyle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 6)]
        public RSI.FLM.PDFFileSetting MyPDFSetting;

        public GetFileWithPictureMarkRequest()
        {
        }

        public GetFileWithPictureMarkRequest(string file_id, string file_name, string emp_no, bool get_pdf, string pic_fileID, RSI.FLM.WaterMarkerPictureStyle MyPictureStyle, RSI.FLM.PDFFileSetting MyPDFSetting)
        {
            this.file_id = file_id;
            this.file_name = file_name;
            this.emp_no = emp_no;
            this.get_pdf = get_pdf;
            this.pic_fileID = pic_fileID;
            this.MyPictureStyle = MyPictureStyle;
            this.MyPDFSetting = MyPDFSetting;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetFileWithPictureMarkResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class GetFileWithPictureMarkResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public byte[] GetFileWithPictureMarkResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string file_name;

        public GetFileWithPictureMarkResponse()
        {
        }

        public GetFileWithPictureMarkResponse(byte[] GetFileWithPictureMarkResult, string file_name)
        {
            this.GetFileWithPictureMarkResult = GetFileWithPictureMarkResult;
            this.file_name = file_name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FLMServiceChannel : RSI.FLM.FLMService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FLMServiceClient : System.ServiceModel.ClientBase<RSI.FLM.FLMService>, RSI.FLM.FLMService
    {

        public FLMServiceClient()
        {
        }

        public FLMServiceClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public FLMServiceClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public FLMServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public FLMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public string UploadFile(string sys_id, byte[] file_stream, string file_name, string biz_id, string security_level, string mark_style, bool preconvert_pdf, string emp_no, string remark)
        {
            return base.Channel.UploadFile(sys_id, file_stream, file_name, biz_id, security_level, mark_style, preconvert_pdf, emp_no, remark);
        }

        public System.Threading.Tasks.Task<string> UploadFileAsync(string sys_id, byte[] file_stream, string file_name, string biz_id, string security_level, string mark_style, bool preconvert_pdf, string emp_no, string remark)
        {
            return base.Channel.UploadFileAsync(sys_id, file_stream, file_name, biz_id, security_level, mark_style, preconvert_pdf, emp_no, remark);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RSI.FLM.GetFileResponse RSI.FLM.FLMService.GetFile(RSI.FLM.GetFileRequest request)
        {
            return base.Channel.GetFile(request);
        }

        public byte[] GetFile(string file_id, ref string file_name, string emp_no, bool get_pdf, RSI.FLM.PDFFileSetting MyPDFSetting)
        {
            RSI.FLM.GetFileRequest inValue = new RSI.FLM.GetFileRequest();
            inValue.file_id = file_id;
            inValue.file_name = file_name;
            inValue.emp_no = emp_no;
            inValue.get_pdf = get_pdf;
            inValue.MyPDFSetting = MyPDFSetting;
            RSI.FLM.GetFileResponse retVal = ((RSI.FLM.FLMService)(this)).GetFile(inValue);
            file_name = retVal.file_name;
            return retVal.GetFileResult;
        }

        public System.Threading.Tasks.Task<RSI.FLM.GetFileResponse> GetFileAsync(RSI.FLM.GetFileRequest request)
        {
            return base.Channel.GetFileAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RSI.FLM.GetFileforExternalResponse RSI.FLM.FLMService.GetFileforExternal(RSI.FLM.GetFileforExternalRequest request)
        {
            return base.Channel.GetFileforExternal(request);
        }

        public byte[] GetFileforExternal(string file_id, ref string file_name, string emp_no, bool get_pdf, RSI.FLM.PDFFileSetting MyPDFSetting, string strExternalCompany)
        {
            RSI.FLM.GetFileforExternalRequest inValue = new RSI.FLM.GetFileforExternalRequest();
            inValue.file_id = file_id;
            inValue.file_name = file_name;
            inValue.emp_no = emp_no;
            inValue.get_pdf = get_pdf;
            inValue.MyPDFSetting = MyPDFSetting;
            inValue.strExternalCompany = strExternalCompany;
            RSI.FLM.GetFileforExternalResponse retVal = ((RSI.FLM.FLMService)(this)).GetFileforExternal(inValue);
            file_name = retVal.file_name;
            return retVal.GetFileforExternalResult;
        }

        public System.Threading.Tasks.Task<RSI.FLM.GetFileforExternalResponse> GetFileforExternalAsync(RSI.FLM.GetFileforExternalRequest request)
        {
            return base.Channel.GetFileforExternalAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RSI.FLM.GetFileWithMarkStyleResponse RSI.FLM.FLMService.GetFileWithMarkStyle(RSI.FLM.GetFileWithMarkStyleRequest request)
        {
            return base.Channel.GetFileWithMarkStyle(request);
        }

        public byte[] GetFileWithMarkStyle(string file_id, ref string file_name, string emp_no, bool get_pdf, RSI.FLM.WaterMarkerFontStyle MyMarkStyle, RSI.FLM.PDFFileSetting MyPDFSetting)
        {
            RSI.FLM.GetFileWithMarkStyleRequest inValue = new RSI.FLM.GetFileWithMarkStyleRequest();
            inValue.file_id = file_id;
            inValue.file_name = file_name;
            inValue.emp_no = emp_no;
            inValue.get_pdf = get_pdf;
            inValue.MyMarkStyle = MyMarkStyle;
            inValue.MyPDFSetting = MyPDFSetting;
            RSI.FLM.GetFileWithMarkStyleResponse retVal = ((RSI.FLM.FLMService)(this)).GetFileWithMarkStyle(inValue);
            file_name = retVal.file_name;
            return retVal.GetFileWithMarkStyleResult;
        }

        public System.Threading.Tasks.Task<RSI.FLM.GetFileWithMarkStyleResponse> GetFileWithMarkStyleAsync(RSI.FLM.GetFileWithMarkStyleRequest request)
        {
            return base.Channel.GetFileWithMarkStyleAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RSI.FLM.GetFileWithPictureMarkResponse RSI.FLM.FLMService.GetFileWithPictureMark(RSI.FLM.GetFileWithPictureMarkRequest request)
        {
            return base.Channel.GetFileWithPictureMark(request);
        }

        public byte[] GetFileWithPictureMark(string file_id, ref string file_name, string emp_no, bool get_pdf, string pic_fileID, RSI.FLM.WaterMarkerPictureStyle MyPictureStyle, RSI.FLM.PDFFileSetting MyPDFSetting)
        {
            RSI.FLM.GetFileWithPictureMarkRequest inValue = new RSI.FLM.GetFileWithPictureMarkRequest();
            inValue.file_id = file_id;
            inValue.file_name = file_name;
            inValue.emp_no = emp_no;
            inValue.get_pdf = get_pdf;
            inValue.pic_fileID = pic_fileID;
            inValue.MyPictureStyle = MyPictureStyle;
            inValue.MyPDFSetting = MyPDFSetting;
            RSI.FLM.GetFileWithPictureMarkResponse retVal = ((RSI.FLM.FLMService)(this)).GetFileWithPictureMark(inValue);
            file_name = retVal.file_name;
            return retVal.GetFileWithPictureMarkResult;
        }

        public System.Threading.Tasks.Task<RSI.FLM.GetFileWithPictureMarkResponse> GetFileWithPictureMarkAsync(RSI.FLM.GetFileWithPictureMarkRequest request)
        {
            return base.Channel.GetFileWithPictureMarkAsync(request);
        }

        public bool ConvertToPDF(string strSysID, string strBizID, string strFileID, string location)
        {
            return base.Channel.ConvertToPDF(strSysID, strBizID, strFileID, location);
        }

        public System.Threading.Tasks.Task<bool> ConvertToPDFAsync(string strSysID, string strBizID, string strFileID, string location)
        {
            return base.Channel.ConvertToPDFAsync(strSysID, strBizID, strFileID, location);
        }

        public bool DeleteFile(string file_id, string emp_no)
        {
            return base.Channel.DeleteFile(file_id, emp_no);
        }

        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string file_id, string emp_no)
        {
            return base.Channel.DeleteFileAsync(file_id, emp_no);
        }

        public bool DeleteFileByBizID(string sys_id, string biz_id, string emp_no)
        {
            return base.Channel.DeleteFileByBizID(sys_id, biz_id, emp_no);
        }

        public System.Threading.Tasks.Task<bool> DeleteFileByBizIDAsync(string sys_id, string biz_id, string emp_no)
        {
            return base.Channel.DeleteFileByBizIDAsync(sys_id, biz_id, emp_no);
        }

        public bool SetFileAttribute(string sys_id, string biz_id, string file_id, string security_level, string mark_style, string emp_no)
        {
            return base.Channel.SetFileAttribute(sys_id, biz_id, file_id, security_level, mark_style, emp_no);
        }

        public System.Threading.Tasks.Task<bool> SetFileAttributeAsync(string sys_id, string biz_id, string file_id, string security_level, string mark_style, string emp_no)
        {
            return base.Channel.SetFileAttributeAsync(sys_id, biz_id, file_id, security_level, mark_style, emp_no);
        }

        public string[] GetFileIDByBizID(string sys_id, string biz_id)
        {
            return base.Channel.GetFileIDByBizID(sys_id, biz_id);
        }

        public System.Threading.Tasks.Task<string[]> GetFileIDByBizIDAsync(string sys_id, string biz_id)
        {
            return base.Channel.GetFileIDByBizIDAsync(sys_id, biz_id);
        }

        public bool CheckFileID(string file_id)
        {
            return base.Channel.CheckFileID(file_id);
        }

        public System.Threading.Tasks.Task<bool> CheckFileIDAsync(string file_id)
        {
            return base.Channel.CheckFileIDAsync(file_id);
        }

        public System.Data.DataTable CheckPDFStatus(string sys_id, string biz_id, string file_id)
        {
            return base.Channel.CheckPDFStatus(sys_id, biz_id, file_id);
        }

        public System.Threading.Tasks.Task<System.Data.DataTable> CheckPDFStatusAsync(string sys_id, string biz_id, string file_id)
        {
            return base.Channel.CheckPDFStatusAsync(sys_id, biz_id, file_id);
        }

        public string GetEncryptUrl(string queryString, string user_name, string password)
        {
            return base.Channel.GetEncryptUrl(queryString, user_name, password);
        }

        public System.Threading.Tasks.Task<string> GetEncryptUrlAsync(string queryString, string user_name, string password)
        {
            return base.Channel.GetEncryptUrlAsync(queryString, user_name, password);
        }

        public RSI.FLM.PDFFileSetting GetPDFFileSetting()
        {
            return base.Channel.GetPDFFileSetting();
        }

        public System.Threading.Tasks.Task<RSI.FLM.PDFFileSetting> GetPDFFileSettingAsync()
        {
            return base.Channel.GetPDFFileSettingAsync();
        }

        public RSI.FLM.WaterMarkerFontStyle GetWaterMarkerFontStyle()
        {
            return base.Channel.GetWaterMarkerFontStyle();
        }

        public System.Threading.Tasks.Task<RSI.FLM.WaterMarkerFontStyle> GetWaterMarkerFontStyleAsync()
        {
            return base.Channel.GetWaterMarkerFontStyleAsync();
        }

        public System.Data.DataTable GetFileGroup(string sys_id, string[] biz_id_list, string[] file_id_list)
        {
            return base.Channel.GetFileGroup(sys_id, biz_id_list, file_id_list);
        }

        public System.Threading.Tasks.Task<System.Data.DataTable> GetFileGroupAsync(string sys_id, string[] biz_id_list, string[] file_id_list)
        {
            return base.Channel.GetFileGroupAsync(sys_id, biz_id_list, file_id_list);
        }

        public byte[] DecryptFile(string empNo, string sys_id, byte[] file_stream, string file_name, string connection_string, string provider_name)
        {
            return base.Channel.DecryptFile(empNo, sys_id, file_stream, file_name, connection_string, provider_name);
        }

        public System.Threading.Tasks.Task<byte[]> DecryptFileAsync(string empNo, string sys_id, byte[] file_stream, string file_name, string connection_string, string provider_name)
        {
            return base.Channel.DecryptFileAsync(empNo, sys_id, file_stream, file_name, connection_string, provider_name);
        }

        public byte[] EncryptFile(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read)
        {
            return base.Channel.EncryptFile(sys_id, file_stream, file_name, user_and_rights, org_and_rights, valid_days, offline_read);
        }

        public System.Threading.Tasks.Task<byte[]> EncryptFileAsync(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read)
        {
            return base.Channel.EncryptFileAsync(sys_id, file_stream, file_name, user_and_rights, org_and_rights, valid_days, offline_read);
        }

        public byte[] EncryptFileByEmail(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read)
        {
            return base.Channel.EncryptFileByEmail(sys_id, file_stream, file_name, email_and_rights, valid_days, offline_read);
        }

        public System.Threading.Tasks.Task<byte[]> EncryptFileByEmailAsync(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read)
        {
            return base.Channel.EncryptFileByEmailAsync(sys_id, file_stream, file_name, email_and_rights, valid_days, offline_read);
        }

        public byte[] EncryptFileWithOption(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string encrypt_mode)
        {
            return base.Channel.EncryptFileWithOption(sys_id, file_stream, file_name, user_and_rights, org_and_rights, valid_days, offline_read, encrypt_mode);
        }

        public System.Threading.Tasks.Task<byte[]> EncryptFileWithOptionAsync(string sys_id, byte[] file_stream, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string encrypt_mode)
        {
            return base.Channel.EncryptFileWithOptionAsync(sys_id, file_stream, file_name, user_and_rights, org_and_rights, valid_days, offline_read, encrypt_mode);
        }

        public byte[] EncryptFileByEmailWithOption(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read, string encrypt_mode)
        {
            return base.Channel.EncryptFileByEmailWithOption(sys_id, file_stream, file_name, email_and_rights, valid_days, offline_read, encrypt_mode);
        }

        public System.Threading.Tasks.Task<byte[]> EncryptFileByEmailWithOptionAsync(string sys_id, byte[] file_stream, string file_name, string[][] email_and_rights, int valid_days, bool offline_read, string encrypt_mode)
        {
            return base.Channel.EncryptFileByEmailWithOptionAsync(sys_id, file_stream, file_name, email_and_rights, valid_days, offline_read, encrypt_mode);
        }

        public bool CheckFileEncrypt(string sys_id, byte[] file_stream, string file_name)
        {
            return base.Channel.CheckFileEncrypt(sys_id, file_stream, file_name);
        }

        public System.Threading.Tasks.Task<bool> CheckFileEncryptAsync(string sys_id, byte[] file_stream, string file_name)
        {
            return base.Channel.CheckFileEncryptAsync(sys_id, file_stream, file_name);
        }

        public string[][] GetFileEncryptInfo(string sys_id, byte[] file_stream, string file_name)
        {
            return base.Channel.GetFileEncryptInfo(sys_id, file_stream, file_name);
        }

        public System.Threading.Tasks.Task<string[][]> GetFileEncryptInfoAsync(string sys_id, byte[] file_stream, string file_name)
        {
            return base.Channel.GetFileEncryptInfoAsync(sys_id, file_stream, file_name);
        }

        public byte[] GetEncryptFileByFileID(string sys_id, string file_id, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string emp_no)
        {
            return base.Channel.GetEncryptFileByFileID(sys_id, file_id, file_name, user_and_rights, org_and_rights, valid_days, offline_read, emp_no);
        }

        public System.Threading.Tasks.Task<byte[]> GetEncryptFileByFileIDAsync(string sys_id, string file_id, string file_name, string[][] user_and_rights, string[][] org_and_rights, int valid_days, bool offline_read, string emp_no)
        {
            return base.Channel.GetEncryptFileByFileIDAsync(sys_id, file_id, file_name, user_and_rights, org_and_rights, valid_days, offline_read, emp_no);
        }

        public bool UpdateFileInformation(string sys_id, string biz_id, string file_id, string new_biz_id, string edit_by, string allow_handle, string view_password, string security_level, string mark_style)
        {
            return base.Channel.UpdateFileInformation(sys_id, biz_id, file_id, new_biz_id, edit_by, allow_handle, view_password, security_level, mark_style);
        }

        public System.Threading.Tasks.Task<bool> UpdateFileInformationAsync(string sys_id, string biz_id, string file_id, string new_biz_id, string edit_by, string allow_handle, string view_password, string security_level, string mark_style)
        {
            return base.Channel.UpdateFileInformationAsync(sys_id, biz_id, file_id, new_biz_id, edit_by, allow_handle, view_password, security_level, mark_style);
        }
    }
}
